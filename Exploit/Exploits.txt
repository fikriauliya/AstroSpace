PAHLEVI FIKRI AULIYA (A0096034)

========== Class of Vulnerability: mixed content (23) ==========
* Goal: inject http content into https content
* Exploit verification: the attacker is able to embed http page he wish into the https page in the server. In this case, the attacker HTTP content will be displayed in the ads iframe.
* Exploit steps: 
1) Go to Home > Login
Email: user0@email.com
Password: passw0rd
2) Go to Home > Manage Ads > Publish New Ads
3) Enter:
Title: any
Url: http://kompas.com
or https://192.168.0.124
Budget: 10
Description: test

* Specify how to run attack automation tool (if applicable):
None

* Set up a malicious web application as a bait (if applicable)
We don't need to prepare this as the intention is to open a vulnerability for another attack such as Man In the Middle.
When the ads is set to https://192.168.0.124/ (localhost), the Man in Middle Attack can get the cookie in a plain form!

========== Class of Vulnerability: CSRF with no token (13) ==========
* Goal: Attrack the user to another website to change the user theme without his acknowledgement
* Exploit verification: the user's theme is changed to "Cupid"
* Exploit steps: 
1) Go to Home > Log in:
username: user4@email.com
password: passw0rd
2) Go to Home > Membership,
3) Click the user name you want to attack
4) Now the URL should be something like: https://localhost/spaces/6
The last part is the user ID, copy that part
5) Go to https://astrospace-attack.herokuapp.com/attacks/no_csrf/<id>/ip=https:%2f%2f192.168.0.124
Replace the <id> with the user ID we just copied
6) Send the URL to the target user, suggest him to click that. 
7) Later, the victim click the button
8) The page will be redirected, and the themes is changed

* Set up a malicious web application as a bait (if applicable)
https://astrospace-attack.herokuapp.com/attacks/no_csrf/<id>/ip=https:%2f%2f192.168.0.124

========== Class of Vulnerability: Clickjacking ========
* Goal: attrack user to click a link, which silently post a blogpost to the user's wall
* Exploit verification: new blogpost is posted without user's concern
* Exploit steps: 
1) Log in:
username: user4@email.com
password: passw0rd
2) Go to Home > Manage Ads > Publish New Ads
3) Fill in the detail as follow:
Title: anything
URL: https://astrospace-attack.herokuapp.com/attacks/clickjacking/ip=https:%2f%2f192.168.0.124
*The website may load quite slowly sometimes, due to Free herokuapp.com plan, which goes to idle if no activity in 1 hour.
Budget: 1000
Description: anything

4) Go to Home, and check the ads below the page. It display "weight loss" advertisement.
5) Click the link in the advertisement
6) Go to Home, you should see a new blog post added (titled "Hijacked")

* Set up a malicious web application as a bait (if applicable)
The website is hosted here:  https://astrospace-attack.herokuapp.com/attacks/clickjacking/ip=https:%2f%2f192.168.0.124

========== Class of Vulnerability: Remote code execution ========
1) Go to Home > Login
username: user4@email.com
password: passw0rd
2) Go to Home > Edit my profile
3) Upload file named 1.png$_SERVER[SERVER_ADDR]
4) Go to Home, view the source code
5) The remote IP address is printed in the HTML, such as:
src='/photos/10.png127.0.0.1' alt="..." style="width:100%; height: 120px" class="img-thumbnail"/
==================================  END  ==========================

YOSUA MICHAEL MARANATHA (A0096028)
1) Persistent XSS(1)
-Steps to exploit bug:
	(i) Create an image file with name(cannot be done in windows due to filename restriction, but can be done on unix system): a." onerror="alert(1)" 
	(ii) Login to the web application -> Home -> Profile -> Edit my profile
	(iii) Upload the image file on step i) as photo

-Attacker's goal: Inject arbitrary javascript code to anyone who see the our profile's photo.

-If the attack is successful, any user who see our profile's photo would see a message box showing number "1".

#### NEED TO REMEMBER TO PROVIDE THE IMAGE FILE !!!!!   #######
-We don't provide automation tool for this, since we don't know the path in which the image file will be located.
 However, we provide the image file with name: [a." onerror="alert(1)"] for the exploit.


-Vulnerability explanation:
 Currently, everytime the user upload the profile's photo, it will be stored in the server with the following format:
 '[user_id].[photo's extension]'. The photo's extension can be controlled by the user and have no restriction on the server.
 Moreover, we don't sanitize the profile's photo url.



2) Reflected XSS Works in google chrome with XSS Auditor (2)
-Steps to exploit the bug:
	(i) Login to the web application as admin (student@student.com/student)
	(ii) Open the following URL:
	https://[WEB-APP-IP]/admin/edit-info?user_id="</script><scr<script>ipt>alert(1);"

-Attacker's goal: Inject arbitrary javascript code (It can be used to steal admin's cookie, delete other user, etc).

-If the attack is successful, we will see a message box showing number "1".

-The exploit is automatable after the login step as explained above.

-Vulnerability explanation:
 On client side:
 The application will give warning and reflect the user_id input in case the user_id is not exist.
 This warning is not properly sanitized.
 Moreover, the reflection will occur twice (one is shown and one is in HTML comment).
 Since it appear twice, we can trick XSS Auditor by treating the HTML code in between as string (put double quotes).
 And then we need to put the closing tags first before the opening tags.
 On server side:
 The web application server will replace all occurance of <script> to empty string.
 And then it would strip all other tags other than script (using php strip_tag).
 In this case, we can still put script tags by use: <scr<script>ipt>.


3) Reflected XSS Works in google chrome without XSS Auditor (3)
-Steps to exploit the bug:
	(i) Login to the web application as admin (student@student.com/student)
	(ii) Open the following URL:
	https://[WEB-APP-IP]/admin/edit-info?user_id="</script><scr<script>ipt>alert(1);"

-Attacker's goal: Inject arbitrary javascript code (It can be used to steal admin's cookie, delete other user, etc).

-If the attack is successful, we will see a message box showing number "1".

-The exploit is automatable after the login steps as explained above.

-Vulnerability explanation: Similar to previous reflected XSS (2).

4) DOM-based XSS (4)
-Steps to exploit the bug:
	(i) Open the following URL:
	https://[WEB-APP-IP]/users/search?search=<br<b%20onmouseover=alert(1)%20style="display:%20inline-block;width:15000px;%20height:15000px;position:absolute;%20top:0;left:0">
	(ii) Move the mouse pointer to the web-application body (below the header, i.e. near the text User Search).

-Attacker's goal: Inject arbitrary javascript code.

-If the attack is successful, we will see a message box showing number "1".

-The exploit is automatable in a sense that there is a link provided. However, the victim still need to move the mouse pointer inside the web application.

-Vulnerability explanation:
 In the user search page, in case we search [username] that does not exist, it will trigger the javascript to prompt:
 "Cannot find [username]!"
 What the javascript actually does is to take the [username] from the url query parameter with key: search.
 After that, it will try to use regex to strip all tags other than <br>.
 However, there is some bugs with the regex. If there is a not properly closed br open tags ( "<br" ),
 it will other tags inside it. Moreover, the browser will try to parse this other tag inside.
 And it turns out that the other tags we put inside will still allow some event such as 
 onmouseover or onclick (I tested that some event such as onload and onerror didn't work, also other attribute
 such as href or src also didn't work). Hence, we may still exploit this with the above exploit.
====================================  END  =============================

YONG KUAN FENG (A0087975E)

18) Weak Password Checker:
Bug: Current password checker only check for the length of the password upon user profile creations. (6~20 characters). The is no limit of numbers of login attempts a user can excute.
Attack: With a valid username, one can use a password cracker to do a dictionary attack with variations such as change letter 'o' to 0 or 'a' to @. (username: user7@email.com; password: password, passw0rd, p@ssw0rd, p@ssword)

19) Logic Authentication Flaw - Privilege Escalation:
Bug: We planted a bug that does not check on user's privilege that execute the button that delete a comment from a user. Currently, only admin users could do this operation on the admin area page.
Attack: If an admin forgets to logout/close the admin area page --> delete comment page, a non-admin user could login and switch to the tab/window with the delete comment page and click on the button to execute the delete comment operation.

20) Parameter Tempering:
Bug: The web application does not check for additional parameter being added to the back of the URL. An adversary could change the parameter and send message to a non-friend user.
Attack: Inspect the element of the dropdown box and under the content of the dropdown box, we can change the recipient to a non-friend user by changing the parameter of the option value to another user id who is not a friend.

21) Parameter Pollution:
Bug: Using the expected behavior of PHP/Apache application server, we could pollute the parameter by introduce another parameter at the back of the URL to change the behavior of the action. Currently we have planted a bug in changing a non-intended user's info by adding an additional parameter at the back of the URL. This is due to PHP only takes the last occurance of the parameter.
Attack: Inspect the element of the "Edit Info" button, add an addtional parameter at the back "&user_id=15" and we can successfully change the info of user6 instead of the original user that is associated to the button.

==================================  END  ===================================
 
