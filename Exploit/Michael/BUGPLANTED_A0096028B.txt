Bug Description Form 

Name : Yosua Michael Maranatha
MATNR : A0096028B
GROUP : 18
APPLICATION : Astrospaces

== Bug 1 ==

1. Class of vulnerabilities : Persistent XSS (1)

2. Specific configurations / settings (i.e settings on /etc/hosts file): Add NAT Port forwarding for the VM settings as follow:
HOST port: 80 | GUEST port: 80
HOST port: 443 | GUEST port: 443
HOST port: 8888 | GUEST port: 8888

3. Brief description : Put a javascript code into the image extension and upload the image as the attacker profile photo. It will steal the cookie of every other users that see the photo.

4. Bug Description:
- Filename (if applicable): app/views/spaces/show.blade.php
- Line number (if applicable): 6
    
	 <img src='{{$photo_path}}' alt="..." style="width:100%; height: 120px" class="img-thumbnail"/>
	Possible fix: The $photo_path url should be sanitized

- Variable name (if applicable):
- Database table (if applicable):
- Is exploit for this bug automatable? Partial
- Exploit for this bug runs successfully on : (Please tick)
  1. Chrome : Yes
  2. Firefox : Yes
  3. Internet Explorer : Yes


== Bug 2 ==

1. Class of vulnerabilities : Reflected XSS Works in Google Chrome with XSSAuditor (2)

2. Specific configurations / settings (i.e settings on /etc/hosts file): same as Bug 1

3. Brief description : Attract a user to click / go to a URL. Then we still the cookie. This bug caused by failing to sanitize an HTML element.

4. Bug Description:
- Filename (if applicable): app/views/layouts/master.blade.php
- Line number (if applicable): 86
  <p
   class="alert alert-danger" id="warningP">{{ Session::get('warning') }}</p>
  To fix, we should sanitize the warning: {{ Session::get('warning') }} -> {{{ Session::get('warning') }}}


- Variable name (if applicable):
- Database table (if applicable):
- Is exploit for this bug automatable? Full
- Exploit for this bug runs successfully on : (Please tick)
  1. Chrome : Yes
  2. Firefox : Yes
  3. Internet Explorer : Yes (without XSS Filter)


== Bug 3 ==

1. Class of vulnerabilities : Reflected XSS Works in Google Chrome without XSSAuditor (3)
 

2. Specific configurations / settings (i.e settings on /etc/hosts file): Same as Bug 1

3. Brief description : Attract a user to click / go to a URL. Then we still the cookie. This bug caused by failing to sanitize an HTML element.

4. Bug Description:
- Filename (if applicable): app/views/layouts/master.blade.php
- Line number (if applicable): 86
  <p
   class="alert alert-danger" id="warningP">{{ Session::get('warning') }}</p>
  To fix, we should sanitize the warning: {{ Session::get('warning') }} -> {{{ Session::get('warning') }}}


- Variable name (if applicable):
- Database table (if applicable):
- Is exploit for this bug automatable? Full
- Exploit for this bug runs successfully on : (Please tick)
  1. Chrome : Yes
  2. Firefox : Yes
  3. Internet Explorer : Yes (without XSS Filter)

== Bug 4 ==

1. Class of vulnerabilities : DOM-Based XSS (4)

2. Specific configurations / settings (i.e settings on /etc/hosts file): Same as Bug 1

3. Brief description : Attract a user to click / go to a URL. Then we still the cookie. This bug caused by failing to sanitize user input on URL query string reflected to javascript code.

4. Bug Description:
- Filename (if applicable): app/views/users/search.blade.php
- Line number (if applicable): 57 - 60
   
	  var a = getParameterByName("search");
     a = strip_tags(a, "<br>"); 
     var s = "Cannot find " + a + "!";
     searchresult.html(s);

	Possible fix: The variable s should be properly sanitized before put into innerHTML of searchresult.

- Variable name (if applicable):
- Database table (if applicable):
- Is exploit for this bug automatable? Full
- Exploit for this bug runs successfully on : (Please tick)
  1. Chrome : Yes
  2. Firefox : Yes
  3. Internet Explorer : Yes
